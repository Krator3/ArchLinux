
█▀▄▀█ ▄▀█ █▄ █   █▀▀ █▀█ █▀█   ▄▀█ █▀█ █▀▀ █ █   █   █ █▄ █ █ █ ▀▄▀
█ ▀ █ █▀█ █ ▀█   █▀  █▄█ █▀▄   █▀█ █▀▄ █▄▄ █▀█   █▄▄ █ █ ▀█ █▄█ █ █


-----------------------------------------------------------------------------------------

	█ █▄ █ █▀ ▀█▀ ▄▀█ █   █
	█ █ ▀█ ▄█  █  █▀█ █▄▄ █▄▄


ИНСТРУКЦИЯ ПОДХОДИТ ТОЛЬКО ДЛЯ (U)EFI СИСТЕМ!

Перед началом установки необходимо заранее скачать ISO образ Arch Linux и записать его на флешку
P.S: это можно сделать при помощи balenaetcher или ventoy

1) Загружаемся в установочную флешку:
	Выбираем её в Boot Menu или ставим её на первое место в настройках (U)EFI.
	Учтите, что флешка должна быть загружена в режиме (U)EFI.
	Если система устанавливается на виртуальную машину, то нужно включить поддержку (U)EFI.

2) Добавляем русскую раскладку (английская добавлена по умолчанию):
	loadkeys ru
	Посмотреть список всех доступных раскладок можно с помощью этой команды:
		ls /usr/share/kbd/keymaps/**/*.map.gz
	P.S: для переключения раскладки используется сочетание клавиш Ctrl+Shift
		
3) Включаем поддержку кириллицы в консоли:
	Команда для загрузки шрифта стандартного размера с русскими буквами:
		setfont cyr-sun16
	Для экранов с технологией HiDPI можно выбрать один из самых больших доступных шрифтов с русскими буквами:
		setfont ter-c32b
	P.S: доступные шрифты находятся в следующем каталоге:
		 /usr/share/kbd/consolefonts/

4) Проверяем режим загрузки:
	1 способ:
		ls /sys/firmware/efi/efivars
		Если содержимое отображается без каких-либо ошибок, система загружена в режиме UEFI
		Если же такого каталога не существует, возможно, система загружена в режиме BIOS (или CSM)

	2 способ:
		cat /sys/firmware/efi/fw_platform_size
		Если команда возвращает 64, то система загружается в режиме UEFI и имеет 64-разрядную версию (UEFI x64)
		Если команда возвращает 32, то система загружается в режиме UEFI и имеет 32-битную версию (IA32 UEFI) [поддерживает только загрузчик systemd-boot]
		Если файл не существует, возможно, система загружается в режиме BIOS (или CSM)

	P.S: CSM - инструмент UEFI, который загружает ПК, как будто используется BIOS (прослойка совместимости)

5) Проверяем и настраиваем соединение с интернетом:
	При помощи команды ip link проверяем, что наш сетевой интерфейс обнаружен и включён.
	Проверяем соединение с интернетом при помощи следующей команды:
		ping archlinux.org
		P.S: для остановки команды используется сочетание клавиш Ctrl+C

6) Размечаем диск:
	При помощи команды fdisk -l находим нужный диск.
	Далее с помощью команды wipefs --all /dev/sdX очищаем разделы и сигнатуры диска.
	Командой cfdisk /dev/sdX создаём разметку для диска.
	В появившемся меню выбираем "gpt".
	P.S: X - буква диска, на который устанвливается система
	
	Схема разделов:
		  Раздел		Тип			Размер		Назначение
		/dev/sdX1	EFI System 	  	  1G    	Загрузчик для (U)EFI систем
		/dev/sdX2	Linux swap        ОЗУ		Файл подкачки (SWAP)
		/dev/sdX3	Linux filesystem  остаток	Система (в данном случае только / )


	P.S: также можно создать отдельный домашний раздел (/dev/sdX4):
		 В таком случае /dev/sdX3 должен быть = 20-30GB (в идеале >= 60GB)
		 Вместе с тем нужно создать /dev/sdX4 на весь остаток места
		 /dev/sdX4 должен иметь тип "Linux filesystem"

	Теперь выбираем опцию "write", пишем "yes" и выходим из утилиты с помощью опции "quit"

7) Форматируем разделы:
	mkfs.fat -F32 /dev/sdX1
	mkfs.ext4 /dev/sdX3

	Если создавали отдельный домашний раздел:
		mkfs.ext4 /dev/sdX4

	Если создавали SWAP:
		mkswap /dev/sdX2 -L "swap"
		swapon /dev/sdX2

8) Монтируем разделы:
	mount /dev/sdX3 /mnt

	Если создавали отдельный домашний раздел:
		mkdir /mnt/home
		mount /dev/sdX4 /mnt/home

	P.S: (U)EFI раздел примонтируем позже

9) Установим базовую систему:
	pacstrap -i /mnt base base-devel linux linux-firmware linux-headers sudo nano networkmanager efibootmgr

10) Генерируем fstab (конфигурационный файл для дисков и разделов):
	genfstab -U -p /mnt >> /mnt/etc/fstab

11) Входим в систему:
	arch-chroot /mnt /bin/bash

12) Настроим язык:
	nano /etc/locale.gen
	Здесь находим и расскоментируем (убираем знак "#") нужные языки в формате UTF-8:
		en_US.UTF-8 UTF-8
		ru_RU.UTF-8 UTF-8
	Нажимаем сочетание клавиш Ctrl+X, затем "y" и Enter

13) Генерируем локали:
	locale-gen

14) Устанавливаем язык системы:
	echo "LANG=ru_RU.UTF-8" > /etc/locale.conf

15) Сохраняем поддержку русской раскладки и кириллицы:
	Открываем файл vconsole.conf:
		nano /etc/vconsole.conf
	Прописываем следующие параметры в файле:
		KEYMAP=ru
		FONT=cyr-sun16
	Нажимаем сочетание клавиш Ctrl+X, затем "y" и Enter

16) Настраиваем часовой пояс:
	ln -sf /usr/share/zoneinfo/Europe/Moscow /etc/localtime

	P.S: Europe/Moscow можно заменить на своё местоположение

	Сохраняем:
		hwclock --systohc --utc

17) Создаём hostname (имя для ПК):
	echo archlinux > /etc/hostname

	P.S: archlinux можно поменять на своё

18) Настраиваем "hosts":
	nano /etc/hosts

	Прописываем следующие строки в конец файла:
		127.0.0.1 localhost
		::1 localhost
		127.0.1.1 archlinux

	P.S: archlinux меняем на то, что указали в /etc/hostname
	Нажимаем сочетание клавиш Ctrl+X, затем "y" и Enter

 19) Включаем сетевой менеджер:
 	 systemctl enable NetworkManager

 20) Создаём пользователя:
 	 useradd -m -g users -G wheel -s /bin/bash user

 	 P.S: user заменяем на нужное имя пользователя

 21) Создаём пароль для нового пользователя:
	 passwd user

 	P.S: вместо user указываем нужного пользователя

 22) Настраиваем права для группы wheel (права суперпользователя):
 	 EDITOR=nano visudo
	 Здесь находим и расскоментируем (убираем знак "#") следующую строку:
		 %wheel ALL=(ALL:ALL) ALL
	 Нажимаем сочетание клавиш Ctrl+X, затем "y" и Enter

23) Подключаем (U)EFI:
	Создаём папку для раздела (U)EFI:
		mkdir /boot/efi
	Монтируем (U)EFI раздел:
		mount /dev/sdX1 /boot/efi

24) Устанавливаем и конфигурируем GRUB:

	Подключаем обновление микрокода:
	
		Для процессоров Intel:
			pacman -S intel-ucode

		Для процессоров AMD:
			pacman -S amd-ucode

	Ставим GRUB в систему:
		pacman -S grub
		grub-install --target=x86_64-efi --bootloader-id=ARCH --efi-directory=/boot/efi
		grub-mkconfig -o /boot/grub/grub.cfg 

		P.S: ARCH можно заменить на своё имя индификатора

25) Устанавливаем пароль для root пользователя:
	passwd

26) Последние штрихи:
	exit
	umount -R /mnt
	reboot

	P.S: После перезагрузки появится многофункцианальная консоль

27) Добавляем звук в нашу систему:
	sudo pacman -S pipewire pipewire-pulse wireplumber

	Активируем звуковой демон:
		systemctl --user enable --now pipewire.socket pipewire-pulse.socket wireplumber.service

Ссылка на источник: https://github.com/mikeroyal/PipeWire-Guide

28) Устанавливаем Xorg (утилита для отображения графического интрефейса):
	sudo pacman -S xorg xorg-xinit xorg-apps mesa-libgl

29) Устанавливаем драйвера для видеокарты:
	Для Nvidia:
		sudo pacman -S nvidia nvidia-settings

		Открываем файл "mkinitcpio.conf":
			sudo nano /etc/mkinitcpio.conf

		Прописываем следующее в параметр "MODULES":
			MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)

		Также следует удалить kms из массива HOOKS
		P.S:  это не позволит initramfs содержать модуль nouveau

		Нажимаем сочетание клавиш Ctrl+x, затем "y" и Enter

		Перегенерируем файл:
			sudo mkinitcpio -P

		Проверяем, что драйвер работает в нужном режиме:
			sudo cat /sys/module/nvidia_drm/parameters/modeset

			P.S: Если модуль подключен, то в выводе будет "Y". Если "N", то продолжаем настройку.

		Редактируем файл "grub":
			sudo nano /etc/default/grub

		Добавляем параметр для работы Nvidia с Wayland:
			Пишем в строку GRUB_CMDLINE_LINUX_DEFAULT параметр nvidia-drm.modeset=1
			Примечание: данный параметр нужно прописать до параметра quiet

		Обновляем GRUB:
			sudo grub-mkconfig -o /boot/grub/grub.cfg

		Перезагружаем ПК командой reboot
				
30) Устанавливаем рабочее окружение:
	KDE Plasma:
		sudo pacman -S plasma-meta konsole okular dolphin filelight ark p7zip unrar unzip spectacle
			 
	Активируем SDDM (менеджер входа в систему):
		systemctl enable sddm

	Перезагружаем ПК командой reboot

	P.S: если arch linux зависает на этапе загрузки, то делаем так:
		 Принудительно перезагружаем ПК, в дополнительных опциях (advanced options) выбираем пункт "arch (fallback initramfs)"
		
-----------------------------------------------------------------------------------------

	█▀ █▀▀ ▀█▀ ▀█▀ █ █▄ █ █▀▀
	▄█ ██▄  █   █  █ █ ▀█ █▄█


Сменить системные папки на их английские версии:
    1) Открываем терминал

    2) Выполняем следующую команду:
        LANG=C xdg-user-dirs-update --force

    3) Перезагружаем систему для применения конфигурации

    4) В Dolphin нужно заменить точки входа системных папок

    P.S: Команда настроит и создаст новые папки, но не затронет старые и ничего не скопирует.

Ссылка на оригинал:
    https://askubuntu.ru/questions/279909/izmenite-imja-sistemnoj-papki-obratno-na-anglijskij

-----------------------------------------------------------------------------------------

Настройка менеджера пакетов pacman и терминала:
    1) Открываем терминал

    2) Изменяем файл "pacman.conf":
        sudo nano /etc/pacman.conf

    3) Делаем вывод в консоли цветным:
        Ищем #Misc options, находим параметр #Color и удаляем #
        Для того что бы pacman обрёл правильный вид сразу после Color добавляем новый параметр ILoveCandy.
        Теперь прогрессбар при скачивании пакетов будет в виде пакмена

    4) Включаем параллельное скачивание пакетов:
        Находим параметр "#ParallelDownloads" и удаляем #

    5) Включяем репозиторий multilib:
        Находим и раскомментируем раздел [multilib], а также параметр Include = /etc/pacman.d/mirrorlist

    6) Сохраняем изменения комбинацией клавиш Ctrl+X, затем y и Enter

Ссылка на оригинал:
    https://mkdir-ivanov.gitbook.io/blog/archlinux/arch-posle-ustanovki-2023

-----------------------------------------------------------------------------------------

Создаём крюк для автоматической пересборки initramfs после обновления Nvidia драйвера: 

Создаём каталог "hooks":
	sudo mkdir /etc/pacman.d/hooks/

Внутри него создаём файл "nvidia.hook":
	sudo nano /etc/pacman.d/hooks/nvidia.hook

Добавляем в него следующие параметры:
[Trigger]
Operation=Install
Operation=Upgrade
Operation=Remove
Type=Package
Target=nvidia
Target=linux
# Change the linux part above if a different kernel is used

[Action]
Description=Update NVIDIA module in initcpio
Depends=mkinitcpio
When=PostTransaction
NeedsTargets
Exec=/bin/sh -c 'while read -r trg; do case $trg in linux*) exit 0; esac; done; /usr/bin/mkinitcpio -P'

P.S: В Target должны быть указаны пакеты, которые вы установили (nvidia/nvidia-lts, linux/linux-lts)
Примечание: *-dkms пакетам это не нужно, т.к. они автоматически запускают mkinitcpio после обновления

Сохраняем изменения и перезагружаем ПК

Ссылка на оригинал:
	https://wiki.archlinux.org/title/NVIDIA

-----------------------------------------------------------------------------------------

Подключение принтера:
    1) Открываем терминал

    2) Устанавливаем нужные пакеты:
        sudo pacman -S --needed cups cups-pdf print-manager
        P.S: print-manager не обязательно устанавливать. Без него всё отлично работает.
        	 Данный пакет нужен для интеграции с панелью настроек KDE

    3) Включаем службу печати:
        systemctl enable cups.socket

    4) Активируем службу печати:
        systemctl start cups.socket

    5) Добавляем пользователя в группу "lp":
        sudo usermod -aG lp имя пользователя

    6) Устанавливаем драйвер для принтера:
        В моём случае это brlaser из AUR:
			paru brlaser

			P.S: paru - AUR помощник, который нужно устанавливать отдельно!

        Ссылка на поддерживаемые модели:
            https://wiki.archlinux.org/title/CUPS/Printer-specific_problems

    7) Устанавливаем приложение для GUI настройки принтера:
        sudo pacman -S --needed system-config-printer

Ссылки на оригинал:
    https://kb.adamsdesk.com/operating_system/arch_linux_install_network_printer/
    https://www.youtube.com/watch?v=tHV1y-zbp5Q

-----------------------------------------------------------------------------------------

Установка дополнительных шрифтов:

	1) Находим нужные шрифты в интернете (.ttf)
	2) Создаём папку для хранения шрифтов если она не существует:
		 mkdir ~/.local/share/fonts/
		 P.S: Учтите, что шрифты будут установлены только для этого пользователя!
		 Если нужно, чтобы шрифты работали у всех пользователей, выполните эту команду:
			mkdir /usr/local/share/fonts/
			или, если не сработает
			mkdir -p /usr/local/share/fonts
	3) Перемещаем свои шрифты в данную папку
		P.S: также можно создать структуру для удобства. Например:
			└── ttf
				├── AnonymousPro
				│   ├── Anonymous-Pro-B.ttf
				│   ├── Anonymous-Pro-I.ttf
				│   └── Anonymous-Pro.ttf
				└── CascadiaCode
					├── CascadiaCode-Bold.ttf
					├── CascadiaCode-Light.ttf
					└── CascadiaCode-Regular.ttf

	4) Обновляем кэш шрифтов в системе:
		fc-cache -f -v

Ссылка на оригинал:
	https://wiki.archlinux.org/title/Fonts#Installation

-----------------------------------------------------------------------------------------

Настройка Wayland:
P.S: всвязи с масштабным обновлением kde plasma 6 данный блок может быть неактуальным!

	1) Создаём каталог "environment.d":
		mkdir ~/.config/environment.d/
	
	2) Настраиваем файл "envvars.conf"
		sudo nano  ~/.config/environment.d/envvars.conf
	
Пишем в него следующее:

SDL_VIDEODRIVER=wayland
XDG_SESSION_TYPE=wayland
QT_QPA_PLATFORM="wayland;xcb"
MOZ_ENABLE_WAYLAND=1
GBM_BACKEND=nvidia-drm
WLR_NO_HARDWARE_CURSORS=1
KITTY_ENABLE_WAYLAND=1
QT_QUICK_BACKEND=software
CLUTTER_BACKEND=wayland
SDL_VIDEODRIVER="wayland,x11"
	
Параметры для других приложений следует прописывать в этом же файле
P.S: параметры считываются только этим пользователем и только в сеансе Wayland, так как в Xorg они бесполезны

Ссылка на оригинал:
        https://m.vk.com/@linux2-wayland-v-kde-na-endeavouros

-----------------------------------------------------------------------------------------

▄▀█ █▀█ █▀█ █▀
█▀█ █▀▀ █▀▀ ▄█

Из официального репозитория:
	firefox
	telegram-desktop
	kcalc
	discord
	qbittorrent
	vlc
	haruna (зависит от mpv)
	keepassxc
	audacious
	htop
	neofetch
	gwenview
	timeshift
	kolourpaint

    neovim
	git
    xclip
    wl-clipboard
    nodejs
    npm
    + nerd font

Из AUR:
	onlyoffice-bin
	ventoy-bin
	stacer-bin

Вручную:
	micro [GitHub]
	paru-bin [GitHub]
	jetbrains-toolbox [Site]
	minecraft (TLauncher) [Site]
	balenaEtcher [Site]

Дополнение к некоторым программам:
	Timeshift:
		Восстановление системы из консоли:
			sudo timeshift --restore

			После выбираем нужный снимок, подтверждаем свои действия.
			Остальные параметры оставляем по умолчанию.


	Minecraft:
		Для работы файла требуется определённая версия Java:
			sudo pacman -S jre8-openjdk

		Для запуска файла используется следующая команда:
			java -jar path/to/file

		Для запуска файла из проводника делаем следующее:
			Создаём папку applications:
				mkdir ~/.local/share/applications
			Устанавливаем программу для назначения типов:
				sudo pacman -S perl-file-mimeinfo
			Назначаем тип для файла:
				mimeopen -d path/to/file
			Выбираем пункт "Other..." вписав нужную цифру
			Прописываем данный параметр:
				java -jar

    Neovim:
        Я использую свою собственную сборку - FixVim, доступную в моем одноименном репозитории на GitHub

-----------------------------------------------------------------------------------------

█▀▄▀█ █▀▀ █▀▄▀█ █▀█ █▀█ █▄█
█ ▀ █ ██▄ █ ▀ █ █▄█ █▀▄  █


Команды для работы с pacman (пакетный менеджер):
	
	Установка одного или нескольких пакетов (включая зависимости):
		sudo pacman -S название_пакета1 название_пакета2 ...

		P.S: Если пакет имеется в разных репозиториях (например, в extra и testing), можно указать, откуда следует установить пакет:
			sudo  pacman -S extra/имя_пакета

	Установка несколько пакетов с частично совпадающими названиями:
		sudo pacman -S plasma-{desktop,mediacenter,nm}

	 Установка пакета из файла/сети:
	 	sudo pacman -U /путь_к_файлу/файл.tar.xz
	 	
	 	sudo pacman -U http://www.example.com/repo/example.pkg.tar.xz
	 	

	Удаление пакета:
		Не удаляя его зависимости:
			sudo pacman -R название_пакета

		С зависимостями, которые не нужны другим пакетам:
			sudo pacman -Rs название_пакета

		С зависимостями + пакеты, для которых он является зависимостью:
			sudo pacman -Rsc название_пакета

		С файлами конфигурации + "-Rs":
			sudo pacman -Rsn название_пакета

		Принудительное, с игнорированием зависимостей (они не удаляются):
			sudo pacman -Rdd название_пакета


	Очистка системы от "пакетов-сирот":
		sudo pacman -Rsn $(pacman -Qdtq)


	Обновление системы:
		sudo pacman -Syu

		Можно указать пакеты, которые будут установлены после обновления системы: 
			sudo pacman -Syu название_пакета

	Поиск пакетов:
		sudo pacman -Ss название_пакета

	Подробная информация о пакете:
		sudo pacman -Si название_пакета
		sudo pacman -Qi название_пакета

		P.S: работают примерно одинаково, но выдают немного разные данные

	Очистка кэша:
		Удалить все кэшированные версии удалённых пакетов и неиспользуемые базы данных:
			sudo pacman -Sc

		Удалить вообще все файлы из кэша:
			sudo pacman -Scc

			Важно: полная очистка кэша сделает невозможным откат пакетов или их переустановку без повторного скачивания!

	Получить все доступные команды с пояснениями:
			pacman --help (также можно использовать -h)

-----------------------------------------------------------------------------------------

Команды для работы с flatpak:
P.S: по умолчанию, flatpak не активен в Arch Linux, поэтому при надобности придется подключить его вручную по инструкции с официального сайта проекта

	Установить программу:
		flatpak install название_пакета

	Удалить программу:
		flatpak uninstall название_пакета

	Обновленить программу:
		flatpak update название_пакета

	Показать список установленных приложений:
		flatpak list

	Показать информацию об установленных приложениях:
		flatpak info

	Запустить приложение:
		flatpak run название_пакета

	Остановить запущенное приложение:
		flatpak kill название_пакета

	Список всех настроенных репозиториев:
		flatpak remotes

	Добавить новый репозиторий:
		flatpak remote-add АДРЕС

	Удалить настроенный репозиторий:
		flatpak remote-delete АДРЕС

	Показать информацию об установленных приложениях:
		flatpak remote-info

	Получить все доступные команды с пояснениями:
		flatpak --help (также можно использовать -h)
----------------------------------------------------------------------------------------

Разница между звуковыми профилями:
	Analog Stereo Duplex (Аналоговый стерео дуплекс) используется для одновременного воспроизведения и записи звука
	Analog Stereo Output (Аналоговый стерео вывод) используется только для воспроизведения звука

-----------------------------------------------------------------------------------------

Разница между systemctl enable name.service и systemctl enable name:
	Различия между этими командами заключаются в способе указания сервиса, который нужно активировать.
	Оба варианта команды являются правильными по следующей причине:
		systemctl способен сам добавить ".service", так как большинство служб в systemd используют данное расширение.

-----------------------------------------------------------------------------------------
Работа с архивами tar:

	Создание tar архива:
    	tar -cvf archive.tar files - создать архив с именем "archive.tar" из файлов "files".
    	tar -czvf archive.tar.gz directory - создать сжатый архив "archive.tar.gz" из директории "directory" с использованием gzip.
    	tar -cjvf archive.tar.bz2 directory - создать сжатый архив "archive.tar.bz2" из директории "directory" с использованием bzip2.

	Распаковка tar архива:
		tar -xvf archive.tar - извлечь файлы из архива "archive.tar".
		tar -xzvf archive.tar.gz - извлечь файлы из сжатого архива "archive.tar.gz".
		tar -xjvf archive.tar.bz2 - извлечь файлы из сжатого архива "archive.tar.bz2".

	Просмотр содержимого tar архива:
		tar -tvf archive.tar - показать список файлов в архиве "archive.tar".
		tar -tzvf archive.tar.gz - показать список файлов в сжатом архиве "archive.tar.gz".
		tar -tjvf archive.tar.bz2 - показать список файлов в сжатом архиве "archive.tar.bz2".

	Добавление файлов в существующий tar архив:
		tar -rvf archive.tar file - добавить файл "file" в архив "archive.tar".
		tar -rzvf archive.tar.gz file - добавить файл "file" в сжатый архив "archive.tar.gz".
		tar -rjvf archive.tar.bz2 file - добавить файл "file" в сжатый архив "archive.tar.bz2".

	Исключение файлов при создании архива:
		tar -cvf archive.tar --exclude="*.txt" directory - создать архив "archive.tar" из директории "directory", исключая файлы с расширением .txt.

	P.S: Вместо .tar.gz можно использовать .tgz ; Вместо .tar.bz2 можно использовать .tar.bzip2, .tbz2, .tb2, .tbz

-----------------------------------------------------------------------------------------

Основные способы работы с командой cat:

1) Вывести содержимое файла в консоль:
    cat имя_файла

2) Объединение нескольких файлов в один новый в указанном порядке:
    cat файл1 файл2 > новый_файл

3. Просмотр вывода постранично при помощи команды less:
    cat имя_файла | less
    P.S: Исп. стрелки для прокрутки и клавишу "q" для выхода

4. Создание нового файла:
    cat > новый_файл
    P.S: Весь текст, который был введён в терминал будет сохранен в новом файле. Чтобы закончить ввод, нажмите Ctrl + D

5. Добавление содержимого в конец существующего файла без перезаписи содержимого:
    cat файл1 >> существующий_файл

-----------------------------------------------------------------------------------------

Узнаём формат файла:
	Для этого используется утилита file

	Синтаксис программы очень простой:
		file /path/to/file

	Пример:
		file /home/user/document.pdf

-----------------------------------------------------------------------------------------

Анализируем файлы при помощи wc:
	Для работы с данной утилитой используйте следующую команду:
		wc /path/to/file

	Данные выводятся в следующем порядке:
		    кол-во строк, слов, символов 

	Пример:
		file ~/file.txt

		P.S: "~" - сокращение для домашнего каталога (/home/user)
			
-----------------------------------------------------------------------------------------

Другие команды терминала:
Ctrl+c - остановить выполнение команды
Ctrl+d - закрыть терминал (поле для ввода команд должно быть пустым)

-----------------------------------------------------------------------------------------

Управление модулями ядра:
	lsmod - вывод всех загруженных модулей в виде таблицы.
	modinfo - вывод информации о модуле: файл модуля, краткое описание, авторы, лицензия, параметры.
	modprobe - утилита для загрузки и выгрузки модулей.

	Загрузка модуля:
		sudo modprobe название_модуля

		P.S: дополнительно можно указать нужные параметры:
			sudo modprobe название_модуля параметр=значение

	Выгрузка модуля:
		sudo modprobe -r название_модуля

	Вывести список параметров модуля:
		modinfo название_модуля

-----------------------------------------------------------------------------------------

Одновременный запуск нескольких команд в Linux:

	Последовательный запуск команд:
		Для запуска следующей команды после завершения предыдущей, используйется символ ";"
		Пример:
			command1 ; command2 ; command3

	Параллельное выполнение команд:
		Для одновременного выполнения команд используйте амперсанд (&)
		Имейте в виду, что амперсанд переводит процесс в фоновый режим, позволяя немедленно запустить следующую команду!
		Например:
			command1 & command2

	Использование логических операторов:
		Оператор '&&' выполнит следующую команду, если предыдущая выполнена успешно.
		Оператор '||' выполнит следующую команду, если предыдущая завершится неудачей.

		Примеры:
			command1 && command2
			command1 || command2

	Группировка команд:
		Для выполнения команд в определенном порядке используются скобки.
		Пример:
			(command1 ; command2) & command3

	Использование каналов командной строки:
		Канал - инструмент для передачи выходных данных одной команды в качестве входных данных другой.
		Вы можете сделать это с помощью вертикальной полосы (|)
		Пример:
			command1 | command2

	Автоматизация повторяющихся задач:
		Для этого используется bash скрипт (файл с расширением .sh)
		Пример:
			#!/bin/bash
			command1
			command2
			command3 

		После выполните chmod +x myscript.sh, чтобы сделать его исполняемым.
		Для запуска используется следующая команда:
			./myscript.sh

-----------------------------------------------------------------------------------------

	█▀▀ █ █ █▀▀ █▄▀ █
	█▀  █▄█ █▄▄ █ █ ▄


Pipewire: Аудиоустройства не найдены (звук отсутствует)

	systemctl --user restart pipewire.socket pipewire-pulse.socket wireplumber.service

-----------------------------------------------------------------------------------------

AppImage (jetbrains toolbox): файл не запускается, хотя является исполняемым (проблема с FUSE)

	1) Установите FUSE в систему:
		sudo pacman -Syu fuse

	2) Убедитесь, что модуль "fuse" загружен в ядро:
		lsmod | grep fuse

		P.S: Если вывод не пустой, значит модуль "fuse" уже загружен.

	3) Если модуль "fuse" не загружен:
		sudo modprobe fuse

	4) Перезагрузите систему командой reboot

-----------------------------------------------------------------------------------------

После включения системы, то есть после ввода пароля для пользователя в SDDM раскладка выбирается рандомно

    1) Проверяем настройки локализации следующей командой:
        localectl status

    2) Если вы видите что-то похожее, то переходим к 3-ему пункту:
        System Locale: LANG=ru_RU.UTF-8
        VC Keymap: ru
        X11 Layout: (unset)  

    3) Устанавливаем нужную раскладку ,например, английскую:
        sudo localectl set-x11-keymap us
        
    4) Перезагружаем систему

    P.S: Учтите, что данный способ подходит только для систем с X11 и systemd! (Wayland должен автоматически проводить подобные настройки)

-----------------------------------------------------------------------------------------

Проблема при запуске, связанная с файловой системой (fsck)

	1) Запусти `fsck` на проблемном разделе (например, на /dev/sdX3) при помощи команды ниже:
		fsck -y /dev/sdX3

	2) После завершения проверки и исправления ошибок перезагрузи компьютер командой reboot

-----------------------------------------------------------------------------------------
